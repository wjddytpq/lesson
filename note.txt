코드를 적고나서 git add 로 파일을 선택한다.  git add app.txt 혹은 여러개를 원할땐 git add app.txt app2.txt 이런식으로하고
모든 파일을 저장하고 싶을땐 git add . 을 하면 된다. 이걸 staging 이라고 한다

git add로 파일을 선택했다면 commit으로 실 저장을 할 수 있다. git commit -m '메시지' 이렇게 메시지 자리에
무언갈 입력해서 파일을 저장할 때 필요한 메시지를 저장하며 저장할 수 있다

git status 를 하면 지금 어떤 파일들을 선택, staging 했는지 보여주는 상태창을 보여준다.

git log --all --oneline 이럼 내가 commit 한 내역들을 다 볼 수 있다.
그리고 내가 commit 할때 적었던 메세지와 commit 아이디를 볼 수 있다.
그 commit 아이디를 이용해서 파일을 비교할 수 있다 예) git difftool 2203f43 566709c 이렇게 하고 y 를 누르면 된다.

git diff 를 입력하면 최근 commit과 현재파일의 차이점을 보여준다. 
j/k 로 스크롤바 조작을 할 수 있고. q키로 종료할 수 있다.

git branch (작명) 을 하면 현재 가장 최근 commit의 사본을 하나 생성해준다.
git switch (작명) 을 하면 사본으로 이동한다. 그 상태에서 상태창을 띄워보면 (git status) (작명)의 branch라고 뜬다
git branch -d (작명) 을 하면 브랜치가 삭제된다.

branch와 main의 코드를 합치려면 먼저 기준(main)이 되는 branch로 switch해서 이동한 후 
git merge (branch명) 을 하면 된다. 근데 만약 서로 같은 파일을 수정했을 대엔 conflict가 발생한다.
만약 그럴 시에 중복된 부분에서 맘에 드는 부분만 남기고 저장하거나, 위에 선택을 통해서 정할 수 있다.

merge를 한 후에 기존 브랜치는 삭제해두자.

git restore (파일명) 을 하면 그 파일의 가장 최근 commit상태로 되돌아간다.
만약 a,b,c 파일을 생성할때마다 commit을 한 상태에서 git restore --sourse (commit 아이디) 를 한다면 b의 commit상태. 
즉 a 와 b만 존재하던 예전에 상태로 갈 수 있다.

git restore --staged (파일명) 을 하면 staging했던 특정 파일을 취소할 수 있다.
git revert (commit 아이디) 를 하면 중간에 있던 commit을 삭제시켜줄 수 있다. 그럼 해당 커밋에서 일어난 작업을 취소시킴.
실제로 실행시키면 에디터가 나오고 첫 줄에 commit message가 있는데 메시지를 적고 창을 닫으면 완료. git log --oneline을 해보면
a b c 그리고 새로운 commit으로써 b commit을 제외시킨 commit을 생성한다.


github 사용할때 기본 브랜치 이름을 main으로 해야한다. git branch -M main
git push -u (github주소.git) main 을 하면 된다. -u를 하면 지금 이 주소를 기억하고 나중에 push만 해줘도 되고
main을 하면 내 main브랜치의 마지막 commit을 github에 저장한다.

github주소가 너무 길면 변수화 시킬 수 있다. 
git remote add (변수명) (주소) 이렇게 하면 된다.